package tela;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import controller.eventoController;
import controller.organizadorController;
import controller.produtoController;
import model.Evento;
import model.Ingresso;
import model.Livro;
import model.Produto;

public class menuInterface {
	public void menu(){
		
	 List <Produto> produtos = new ArrayList<>();
	 Livro a = new Livro();
	 Ingresso i = new Ingresso();
	 Evento evento;
	 produtoController produtocontroller = new produtoController();
	 organizadorController oc = new organizadorController();
	 cadastroOrganizador co = new cadastroOrganizador();
	 Scanner opcaoMenu = new Scanner(System.in);
	 cadastroLivro cadL = new cadastroLivro();
	 cadastroEvento ce = new cadastroEvento();
	 eventoController ec = new eventoController();
	 cadastroIngresso ci = new cadastroIngresso();
	 cadastroProduto cadp = new cadastroProduto();
	 int opcao;
	 int cont;
	 
		do{
			System.out.println("1. Cadastar organizador");
			System.out.println("2. Cadastar evento");
			System.out.println("3. Cadastar ingresso");
			System.out.println("4. Listar ingresso(s)");
			System.out.println("5. Cadastrar Livro");
			System.out.println("6. Listar livro(s)");
			System.out.println("7. Cadastrar produto");
			System.out.println("8. Listar produto(s)");
			System.out.println("9. Sair");
			System.out.print  ("Escolha uma Opção: ");
	
			opcao = opcaoMenu.nextInt();
			
			switch (opcao) {
			case 1: 
				oc.inserirOrganizador(co.cadastrarOrganizador());
				break;
			case 2:
				if(oc.quantidadeorganizadores()==0) {
					System.out.print("Só é possivél criar com organizadores existentes, crie um\n");
				}else {
					ec.inserirEvento(ce.cadastrarEvento(oc.escolherOrganizador()));
				}
				break;
			case 3:
				if(oc.quantidadeorganizadores()==0 || ec.quantidadeeventos()==0) {
					System.out.print("Só é possivél criar com organizadores e eventos existentes, crie-os\n");
				}else {
				evento=ec.escolherEvento();
				i.setEvento(evento);
				produtocontroller.cadastroProduto(i);
				}
					break;
			case 4:
				Ingresso ingressoaux;
				for(cont=0;cont<produtocontroller.quantidadeprodutos();cont++) {
						if(produtocontroller.getProduto(cont) instanceof Ingresso) {
							ingressoaux = (Ingresso) produtocontroller.getProduto(cont);
							System.out.printf("Ingresso %d : Número %d.  Comprador: %s. Evento %s\n",cont+1, ingressoaux.getNumero(), ingressoaux.getLocalevento());    
						}
				}
					break;
			case 5:
				produtocontroller.cadastroProduto(a);
					break;
			case 6:
					Livro livroaux;
					for(cont=0;cont<produtocontroller.quantidadeprodutos();cont++) {
							if(produtocontroller.getProduto(cont) instanceof Livro) {
								livroaux = (Livro) produtocontroller.getProduto(cont);
								System.out.printf("Livro %d : Título %s. Autor %s. Editora: %s. ISBN : %s\n",cont+1,livroaux.getTitulo(), livroaux.getAutores(),livroaux.getEditora(),livroaux.getIsbn());    
							}
					}
					break;		
			case 7:
				produtocontroller.cadProd(cadp.cadastrarproduto());
					break;	
			case 8:
				 produtocontroller.exibirProdutos();
					break;			
			case 9:
				System.out.printf("\nTchau!\n");
					break;	
			default:
         	System.out.printf("\nOpção inválida, Tente novamente\n");
         	break;       
			}
		} while(opcao !=7);
 }
	
}
